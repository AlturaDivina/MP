// src/framer/CartButtonEmbed.tsx
import * as React from "react";
import { addPropertyControls, ControlType } from "framer";

// Importamos el script de inicialización de framerInit.js
React.useEffect(() => {
  if (typeof document !== 'undefined') {
    // Verificar si ya existe el objeto AlturaDivinaCart
    if (!window.framerCartInitialized) {
      try {        // Cargar el script de inicialización
        const script = document.createElement('script');
        script.src = '/framerInit.js';  // Cargar desde la carpeta public
        script.async = true;
        
        // Fallback por si no se puede cargar desde la URL
        script.onerror = () => {
          console.log('Usando inicialización local para Framer Cart...');
          
          // Crear el script manualmente
          const localScript = document.createElement('script');
          localScript.textContent = `
            // Simple cart initialization for Framer
            (function() {
              if (typeof window === 'undefined') return;
              
              window.framerCartInitialized = true;
              
              // Get sessionId
              const getSessionId = function() {
                try {
                  const urlParams = new URLSearchParams(window.location.search);
                  const sessionFromUrl = urlParams.get('sessionId');
                  if (sessionFromUrl) return sessionFromUrl;
                  
                  if (window.sessionStorage) {
                    const storedId = window.sessionStorage.getItem('mp_global_session_id');
                    if (storedId) return storedId;
                  }
                  
                  const newSessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substring(2, 9);
                  if (window.sessionStorage) {
                    window.sessionStorage.setItem('mp_global_session_id', newSessionId);
                  }
                  return newSessionId;
                } catch (e) {
                  console.error('Error getting sessionId:', e);
                  return 'session_' + Date.now();
                }
              };
              
              const sessionId = getSessionId();
              window.mpSessionId = sessionId;
              
              // Create cart data
              let cartData = { items: [], totalItems: 0, totalAmount: 0 };
              
              try {
                const savedCart = localStorage.getItem('mp_cart_' + sessionId);
                if (savedCart) {
                  cartData = JSON.parse(savedCart);
                }
              } catch (e) {
                console.error('Error loading cart:', e);
              }
              
              // Store cart count globally for easy access
              window.mpCartCount = cartData.totalItems || 0;
              
              // Helper to save cart
              const saveCart = function(cart) {
                try {
                  localStorage.setItem('mp_cart_' + sessionId, JSON.stringify(cart));
                  window.mpCartCount = cart.totalItems || 0;
                  
                  // Notify changes
                  window.dispatchEvent(new CustomEvent('ALTURA_DIVINA_CART_UPDATE', {
                    detail: { 
                      source: 'framer_cart', 
                      sessionId,
                      cart
                    }
                  }));
                } catch (e) {
                  console.error('Error saving cart:', e);
                }
              };
              
              // Create basic cart API
              window.AlturaDivinaCart = {
                getSessionId: function() { return sessionId; },
                getCartCount: function() { return Promise.resolve(cartData.totalItems || 0); },
                getCartItems: function() { return Promise.resolve(cartData.items || []); },
                
                openCart: function() {
                  console.log('Opening cart for session:', sessionId);
                  try {
                    window.dispatchEvent(new CustomEvent('ALTURA_DIVINA_OPEN_CART', { 
                      detail: { sessionId } 
                    }));
                    window.dispatchEvent(new CustomEvent('OPEN_CART_SIDEBAR', { 
                      detail: { sessionId } 
                    }));
                  } catch (e) {
                    console.error('Error opening cart:', e);
                  }
                }
              };
              
              console.log('Cart API initialized for Framer with session:', sessionId);
            })();
          `;
          document.head.appendChild(localScript);
        };
        document.head.appendChild(script);
      } catch (error) {
        console.error('Error initializing Framer cart:', error);
      }
    }
  }
}, []);

/**
 * Componente CartButtonEmbed simplificado para Framer
 * Este componente ahora actúa como un puente hacia la API
 * en lugar de implementar la lógica del carrito internamente
 */
interface CartButtonEmbedProps {
  iconColor: string;
  badgeColor: string;
  size: number;
  showBadge: boolean;
  width: number | string;
  height: number | string;
  onCartOpen?: (event: any) => void;
  // Prop opcional para forzar un sessionId
  sessionIdOverride?: string;
}

export function CartButtonEmbed(
  props: CartButtonEmbedProps
): React.ReactElement {
  const {
    iconColor,
    badgeColor,
    size,
    showBadge,
    width,
    height,
    onCartOpen,
    sessionIdOverride
  } = props;

  const [cartCount, setCartCount] = React.useState(0);
  
  // Obtener o crear sessionId global
  const getOrCreateGlobalSessionId = React.useCallback(() => {
    // 1. Intentar obtener de la URL
    if (typeof window !== "undefined") {
      const urlParams = new URLSearchParams(window.location.search);
      const sessionFromUrl = urlParams.get("sessionId");
      if (sessionFromUrl) return sessionFromUrl;
    }
    
    // 2. Intentar obtener del sessionStorage
    if (typeof window !== "undefined" && window.sessionStorage) {
      const storedId = sessionStorage.getItem("mp_global_session_id");
      if (storedId) return storedId;
    }
    
    // 3. Crear uno nuevo y guardarlo
    const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    if (typeof window !== "undefined" && window.sessionStorage) {
      sessionStorage.setItem("mp_global_session_id", newSessionId);
    }
    return newSessionId;
  }, []);
  
  // Usar el sessionId global o el override proporcionado
  const sessionId = React.useMemo(
    () => sessionIdOverride || getOrCreateGlobalSessionId(),
    [getOrCreateGlobalSessionId, sessionIdOverride]
  );  // Función para obtener datos del carrito - VERSIÓN ULTRA SIMPLIFICADA para Framer
  const fetchCartData = React.useCallback(async () => {
    if (typeof window === "undefined" || !sessionId) return;
    
    try {
      // Prioridad 1: Usar la API global si está disponible
      if (window.AlturaDivinaCart && typeof window.AlturaDivinaCart.getCartCount === 'function') {
        try {
          const count = await window.AlturaDivinaCart.getCartCount();
          if (typeof count === 'number') {
            setCartCount(count);
            return;
          }
        } catch (e) {
          console.log("Error usando API global:", e);
        }
      }
      
      // Prioridad 2: Intentar obtener mediante API REST directa
      try {
        const response = await fetch(`/api/cart?sessionId=${sessionId}`);
        if (response.ok) {
          const data = await response.json();
          if (data.success && data.cart) {
            setCartCount(data.cart.totalItems || 0);
            return;
          }
        }
      } catch (apiError) {
        console.log("API no disponible:", apiError);
      }
      
      // Prioridad 3: Usar localStorage como fallback
      try {
        const savedCart = localStorage.getItem(`mp_cart_${sessionId}`);
        if (savedCart) {
          const cartData = JSON.parse(savedCart);
          setCartCount(cartData.totalItems || 0);
          return;
        }
      } catch (storageError) {
        console.error("Error al leer datos del carrito:", storageError);
      }
      
      // Prioridad 4: Revisar si hay un objeto de carrito en la ventana global
      if (window.mpCartCount !== undefined) {
        setCartCount(window.mpCartCount);
        return;
      }
      
      console.log("No se encontraron datos del carrito para sessionId:", sessionId);
    } catch (error) {
      console.error("Error general al obtener datos del carrito:", error);
    }
  }, [sessionId]);
  
  // Cargar datos iniciales y configurar listener para actualizaciones
  React.useEffect(() => {
    fetchCartData();
    
    // Escuchar eventos de actualización del carrito
    const handleCartUpdate = (event) => {
      // Solo actualizar si es el mismo sessionId
      if (event.detail && event.detail.sessionId === sessionId) {
        if (event.detail.cart && typeof event.detail.cart.totalItems === 'number') {
          setCartCount(event.detail.cart.totalItems);
        } else {
          fetchCartData(); // Actualizar desde la API si no se incluyen los datos
        }
      }
    };
    
    if (typeof window !== "undefined") {
      window.addEventListener("ALTURA_DIVINA_CART_UPDATE", handleCartUpdate);
      
      // Verificar cada 3 segundos para mantener sincronizado
      const intervalId = setInterval(fetchCartData, 3000);
      
      return () => {
        window.removeEventListener("ALTURA_DIVINA_CART_UPDATE", handleCartUpdate);
        clearInterval(intervalId);
      };
    }
  }, [fetchCartData, sessionId]);
    // Manejar clic en el botón del carrito  const handleCartButtonClick = () => {
    // Versión ultra robusta para Framer
    if (typeof window !== "undefined") {
      // 1. Intentar usar API global (si existe)
      try {
        if (window.AlturaDivinaCart && typeof window.AlturaDivinaCart.openCart === 'function') {
          window.AlturaDivinaCart.openCart();
          console.log("Abriendo carrito mediante API global");
        } else {
          // 2. Método de fallback: emitir evento personalizado
          console.log("API global no disponible, usando evento personalizado");
          const event = new CustomEvent("ALTURA_DIVINA_OPEN_CART", {
            detail: { sessionId }
          });
          window.dispatchEvent(event);
          
          // 3. Método alternativo: intentar abrir mediante evento del DOM
          const event2 = new CustomEvent("OPEN_CART_SIDEBAR", {
            detail: { sessionId }
          });
          window.dispatchEvent(event2);
        }
      } catch (error) {
        console.error("Error al abrir carrito:", error);
        // Fallback: seguir emitiendo el evento estándar
        const event = new CustomEvent("ALTURA_DIVINA_OPEN_CART", {
          detail: { sessionId }
        });
        window.dispatchEvent(event);
      }
    }
    
    // Ejecutar callback si existe
    if (onCartOpen) {
      onCartOpen({
        sessionId,
        cartCount
      });
    }
  };
  
  return (
    <div style={{ width, height, position: "relative" }}>
      <button 
        onClick={handleCartButtonClick}
        style={{
          backgroundColor: "transparent",
          border: "none",
          cursor: "pointer",
          padding: 0,
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          width: "100%",
          height: "100%"
        }}
        aria-label="Ver carrito"
      >
        <svg 
          width={size} 
          height={size} 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke={iconColor} 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round"
        >
          <circle cx="9" cy="21" r="1"></circle>
          <circle cx="20" cy="21" r="1"></circle>
          <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
        </svg>
        
        {/* Badge con contador */}
        {showBadge && cartCount > 0 && (
          <span style={{
            position: "absolute",
            top: "-8px",
            right: "-8px",
            backgroundColor: badgeColor,
            color: "#FFFFFF",
            borderRadius: "50%",
            width: `${size * 0.45}px`,
            height: `${size * 0.45}px`,
            fontSize: `${size * 0.25}px`,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            fontWeight: "bold"
          }}>
            {cartCount > 99 ? "99+" : cartCount}
          </span>
        )}
      </button>
    </div>
  );
}

// Controles de propiedad para el panel de Framer
addPropertyControls(CartButtonEmbed, {
  iconColor: {
    title: "Icon Color",
    type: ControlType.Color,
    defaultValue: "#333333"
  },
  badgeColor: {
    title: "Badge Color",
    type: ControlType.Color,
    defaultValue: "#F26F32"
  },
  size: {
    title: "Icon Size",
    type: ControlType.Number,
    defaultValue: 24,
    min: 12,
    max: 72,
    step: 1
  },
  showBadge: {
    title: "Show Badge",
    type: ControlType.Boolean,
    defaultValue: true
  },
  sessionIdOverride: {
    title: "Session ID (opcional)",
    type: ControlType.String,
    defaultValue: "",
    placeholder: "Dejar vacío para usar el global"
  }
});
