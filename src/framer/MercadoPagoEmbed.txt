// src/framer/MercadoPagoEmbed.tsx
import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

interface MercadoPagoEmbedProps {
    productId: string
    publicKey: string
    successUrl: string
    pendingUrl: string
    failureUrl: string
    hideTitle: boolean
    buttonColor: string         
    circleColor: string         
    primaryButtonColor: string  
    secondaryButtonColor: string
    width: number | string
    height: number | string
    onRedirect?: (event: any) => void
    // Nuevo prop opcional para forzar un sessionId
    sessionIdOverride?: string
}

export function MercadoPagoEmbed(
    props: MercadoPagoEmbedProps
): React.ReactElement {
    const {
        productId,
        publicKey,
        successUrl,
        pendingUrl,
        failureUrl,
        hideTitle,
        buttonColor,
        circleColor,
        primaryButtonColor,
        secondaryButtonColor,
        width,
        height,
        onRedirect,
        sessionIdOverride
    } = props;
    
    // CAMBIO CLAVE: Usar un sessionId global para toda la página
    const getOrCreateGlobalSessionId = React.useCallback(() => {
        // 1. Intentar obtener de la URL
        if (typeof window !== 'undefined') {
            const urlParams = new URLSearchParams(window.location.search);
            const sessionFromUrl = urlParams.get('sessionId');
            if (sessionFromUrl) return sessionFromUrl;
        }
        
        // 2. Intentar obtener del sessionStorage (persistente en la sesión)
        if (typeof window !== 'undefined' && window.sessionStorage) {
            const storedId = sessionStorage.getItem('mp_global_session_id');
            if (storedId) return storedId;
        }
        
        // 3. Intentar obtener de la variable global
        if (typeof window !== 'undefined' && window.mpSessionId) {
            return window.mpSessionId;
        }
        
        // 4. Crear uno nuevo y guardarlo para que sea consistente
        const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        if (typeof window !== 'undefined' && window.sessionStorage) {
            sessionStorage.setItem('mp_global_session_id', newSessionId);
            // También guardar como variable global
            window.mpSessionId = newSessionId;
        }
        return newSessionId;
    }, []);
    
    // Usar el sessionId global o el override proporcionado explícitamente
    const sessionId = React.useMemo(() => 
        sessionIdOverride || getOrCreateGlobalSessionId(), 
    [getOrCreateGlobalSessionId, sessionIdOverride]);
    
    // Sincronizar con la API central
    React.useEffect(() => {
        if (typeof window === 'undefined' || !sessionId) return;
        
        // Verificar si la API global está disponible
        if (!window.AlturaDivinaCart) {
            // Si no está disponible, crear una versión básica
            window.AlturaDivinaCart = window.AlturaDivinaCart || {
                getSessionId: () => sessionId
            };
        }
        
        // Asegurarnos de que el sessionId global esté sincronizado
        if (window.sessionStorage) {
            window.sessionStorage.setItem('mp_global_session_id', sessionId);
        }
        window.mpSessionId = sessionId;
    }, [sessionId]);
    
    // Escuchar mensajes del iframe
    React.useEffect(() => {
        const handleMessage = (event: MessageEvent) => {
            // Verificar origen para seguridad
            if (!event.origin.includes('mercadopagoiframe.vercel.app')) {
                return;
            }
            
            if (event.data.type === 'MP_PAYMENT_SUCCESS') {
                console.log('Pago exitoso, redirigiendo a:', event.data.redirectUrl);
                // Llamar al callback de redirección si existe
                if (onRedirect) {
                    onRedirect({
                        status: 'success',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                // Redireccionar la página completa
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            } 
            else if (event.data.type === 'MP_PAYMENT_PENDING') {
                console.log('Pago pendiente, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'pending',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
            else if (event.data.type === 'MP_PAYMENT_FAILED') {
                console.log('Pago fallido, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'failed',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
            else if (event.data.type === 'CART_UPDATE') {
                // NUEVO: Cuando el iframe actualiza el carrito, notificar a otros componentes
                if (typeof window !== 'undefined') {
                    // Si hay API global, intentar usarla primero
                    if (window.AlturaDivinaCart && typeof window.AlturaDivinaCart.getCartItems === 'function') {
                        window.AlturaDivinaCart.getCartItems().then((items) => {
                            if (items) {
                                const updateEvent = new CustomEvent('ALTURA_DIVINA_CART_UPDATE', {
                                    detail: { 
                                        source: 'mercadopago_iframe', 
                                        sessionId,
                                        action: event.data.action || 'update',
                                        productId: event.data.productId,
                                        quantity: event.data.quantity,
                                        cart: {
                                            items,
                                            totalItems: items.reduce((sum, item) => sum + (item.quantity || 1), 0)
                                        }
                                    }
                                });
                                window.dispatchEvent(updateEvent);
                            }
                        }).catch(() => {
                            // Si falla, usar localStorage como fallback
                            try {
                                const savedCart = localStorage.getItem(`mp_cart_${sessionId}`);
                                if (savedCart) {
                                    const cartData = JSON.parse(savedCart);
                                    const updateEvent = new CustomEvent('ALTURA_DIVINA_CART_UPDATE', {
                                        detail: { 
                                            source: 'mercadopago_iframe', 
                                            sessionId,
                                            action: event.data.action || 'update',
                                            productId: event.data.productId,
                                            quantity: event.data.quantity,
                                            cart: cartData
                                        }
                                    });
                                    window.dispatchEvent(updateEvent);
                                }
                            } catch (e) {
                                console.error("Error reading cart data:", e);
                            }
                        });
                    } else {
                        // Si no hay API global, usar localStorage como fallback
                        try {
                            const savedCart = localStorage.getItem(`mp_cart_${sessionId}`);
                            if (savedCart) {
                                const cartData = JSON.parse(savedCart);
                                const updateEvent = new CustomEvent('ALTURA_DIVINA_CART_UPDATE', {
                                    detail: { 
                                        source: 'mercadopago_iframe', 
                                        sessionId,
                                        action: event.data.action || 'update',
                                        productId: event.data.productId,
                                        quantity: event.data.quantity,
                                        cart: cartData
                                    }
                                });
                                window.dispatchEvent(updateEvent);
                            }
                        } catch (e) {
                            console.error("Error reading cart data:", e);
                        }
                    }
                }
            }
        };
        
        window.addEventListener('message', handleMessage);
        
        return () => {
            window.removeEventListener('message', handleMessage);
        };
    }, [onRedirect, successUrl, pendingUrl, failureUrl, sessionId]);
    
    const baseUrl = "https://mercadopagoiframe.vercel.app/";
    const queryParams = new URLSearchParams({
        initialProductId: productId || '',
        publicKey: publicKey || '',
        successUrl: successUrl || '',
        pendingUrl: pendingUrl || '',
        failureUrl: failureUrl || '',
        hideTitle: hideTitle ? 'true' : 'false',
        buttonColor: buttonColor || '#F26F32', 
        circleColor: circleColor || '#F26F32',
        primaryButtonColor: primaryButtonColor || '#F26F32',
        secondaryButtonColor: secondaryButtonColor || '#E5E5E5',
        isInIframe: 'true',
        sessionId: sessionId  // Usar el sessionId consistente
    }).toString();
    
    const iframeSrc = `${baseUrl}?${queryParams}`;
    
    return (
        <iframe
            src={iframeSrc}
            width={width}
            height={height}
            style={{
                border: "none",
                borderRadius: "8px",
                overflow: "hidden"
            }}
            allow="payment"
        />
    );
}

// Controles en el panel de Framer
addPropertyControls(MercadoPagoEmbed, {
    productId: {
        title: "Product ID",
        type: ControlType.String,
        defaultValue: "2",
    },
    publicKey: {
        title: "MP Public Key",
        type: ControlType.String,
        defaultValue: "",
    },
    successUrl: {
        title: "Success URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/confirmacion-de-compra",
    },
    pendingUrl: {
        title: "Pending URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/proceso-de-compra",
    },
    failureUrl: {
        title: "Failure URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/error-de-compra",
    },
    hideTitle: {
        title: "Hide Title",
        type: ControlType.Boolean,
        defaultValue: false,
    },
    buttonColor: {
        title: "Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32"
    },
    circleColor: {
        title: "Circle Color",
        type: ControlType.Color,
        defaultValue: "#F26F32"
    },
    primaryButtonColor: {
        title: "Primary Button",
        type: ControlType.Color,
        defaultValue: "#F26F32"
    },
    secondaryButtonColor: {
        title: "Secondary Button",
        type: ControlType.Color,
        defaultValue: "#E5E5E5"
    },
    sessionIdOverride: {
        title: "Session ID (opcional)",
        type: ControlType.String,
        defaultValue: "",
        placeholder: "Dejar vacío para usar el global"
    }
});
