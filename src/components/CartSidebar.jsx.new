import React, { useEffect, useState, useCallback } from 'react';
import { useCart } from '../hooks/useCart';
import CartItem from './CartItem';
import styles from '../styles/CartSidebar.module.css';
import { cn } from '../lib/utils';

const CartSidebar = ({ isOpen: externalIsOpen, onClose, checkoutUrl = '/checkout' }) => {
  // Estado local para control interno
  const [isOpenInternal, setIsOpenInternal] = useState(externalIsOpen || false);
  
  // Sincronizar con prop externa si cambia
  useEffect(() => {
    if (externalIsOpen !== undefined) {
      setIsOpenInternal(externalIsOpen);
    }
  }, [externalIsOpen]);
  
  // Escuchar eventos externos para abrir el sidebar
  useEffect(() => {
    const handleOpenCart = (event) => {
      console.log('Evento para abrir carrito recibido', event.type);
      setIsOpenInternal(true);
    };
    
    // Escuchar tanto el evento del sitio como el evento de Framer
    window.addEventListener('OPEN_CART_SIDEBAR', handleOpenCart);
    window.addEventListener('ALTURA_DIVINA_OPEN_CART', handleOpenCart);
    
    // También usar click en document como método de debug
    const handleDocumentClick = (event) => {
      if (event.target.closest('[data-cart-button]')) {
        console.log('Clic en botón de carrito detectado');
        setIsOpenInternal(true);
      }
    };
    
    document.addEventListener('click', handleDocumentClick);
    
    return () => {
      window.removeEventListener('OPEN_CART_SIDEBAR', handleOpenCart);
      window.removeEventListener('ALTURA_DIVINA_OPEN_CART', handleOpenCart);
      document.removeEventListener('click', handleDocumentClick);
    };
  }, []);
  
  const handleClose = () => {
    console.log('Cerrando carrito');
    setIsOpenInternal(false);
    if (onClose) onClose();
  };
  
  const { items, totalAmount, clearCart, removeItem, updateQuantity } = useCart();
  
  const formatPrice = (price) => {
    return price.toLocaleString('es-MX', {
      style: 'currency',
      currency: 'MXN',
    });
  };

  const handleCheckout = () => {
    handleClose();
    // Use the checkoutUrl prop or default to /checkout
    const sessionId = window.AlturaDivinaCart?.getSessionId?.() || '';
    window.location.href = `${checkoutUrl}?sessionId=${sessionId}`;
  };
  
  const handleClearCart = useCallback(() => {
    if (window.confirm('¿Estás seguro de que deseas vaciar tu carrito?')) {
      clearCart();
    }
  }, [clearCart]);
  
  const handleUpdateQuantity = useCallback((productId, quantity) => {
    if (quantity <= 0) {
      if (window.confirm('¿Quieres eliminar este producto del carrito?')) {
        removeItem(productId);
      }
    } else {
      updateQuantity(productId, quantity);
    }
  }, [removeItem, updateQuantity]);

  return (
    <>
      {isOpenInternal && <div className={styles.overlay} onClick={handleClose}></div>}
      <div className={cn(styles.cartSidebar, isOpenInternal && styles.open)}>
        <div className={styles.header}>
          <h2>Tu Carrito</h2>
          <button onClick={handleClose} className={styles.closeButton} aria-label="Cerrar carrito">
            &times;
          </button>
        </div>
        
        <div className={styles.cartContent}>
          {!items || items.length === 0 ? (
            <div className={styles.emptyCart}>
              <p>Tu carrito está vacío</p>
              <button onClick={handleClose} className={styles.continueShoppingButton}>
                Seguir Comprando
              </button>
            </div>
          ) : (
            <>
              <div className={styles.cartItems}>
                {items.map((item) => (
                  <CartItem 
                    key={item.productId} 
                    item={item}
                    onUpdateQuantity={(qty) => handleUpdateQuantity(item.productId, qty)}
                    onRemove={() => removeItem(item.productId)}
                  />
                ))}
              </div>
              
              <div className={styles.cartSummary}>
                <div className={styles.cartTotal}>
                  <span>Total:</span>
                  <span>{formatPrice(totalAmount)}</span>
                </div>
                
                <div className={styles.cartActions}>
                  <button onClick={handleClearCart} className={styles.clearCartButton}>
                    Vaciar Carrito
                  </button>
                  <button 
                    onClick={handleCheckout}
                    className={styles.checkoutButton}
                  >
                    Proceder al Pago
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </>
  );
};

export default CartSidebar;
