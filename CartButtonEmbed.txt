// src/components/CartButtonEmbed.tsx
import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

/**
 * Componente CartButtonEmbed simplificado para Framer
 * Este componente ahora actúa como un puente hacia la API
 * en lugar de implementar la lógica del carrito internamente
 */
interface CartButtonEmbedProps {
    iconColor: string
    badgeColor: string
    size: number
    showBadge: boolean
    width: number
    height: number
    onCartOpen?: (event: any) => void
    // Nuevo prop opcional para forzar un sessionId
    sessionIdOverride?: string
}

export function CartButtonEmbed(
    props: CartButtonEmbedProps
): React.ReactElement {
    const {
        iconColor,
        badgeColor,
        size,
        showBadge,
        width,
        height,
        onCartOpen,
        sessionIdOverride
    } = props;
    
    const [cartCount, setCartCount] = React.useState(0);
      // Obtener o crear sessionId global
    const getOrCreateGlobalSessionId = React.useCallback(() => {
        // 1. Intentar obtener de la URL
        if (typeof window !== 'undefined') {
            const urlParams = new URLSearchParams(window.location.search);
            const sessionFromUrl = urlParams.get('sessionId');
            if (sessionFromUrl) return sessionFromUrl;
        }
        
        // 2. Intentar obtener del sessionStorage
        if (typeof window !== 'undefined' && window.sessionStorage) {
            const storedId = sessionStorage.getItem('mp_global_session_id');
            if (storedId) return storedId;
        }
        
        // 3. Crear uno nuevo y guardarlo
        const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        if (typeof window !== 'undefined' && window.sessionStorage) {
            sessionStorage.setItem('mp_global_session_id', newSessionId);
        }
        return newSessionId;
    }, []);
    
    // Usar el sessionId global o el override proporcionado
    const sessionId = React.useMemo(() => 
        sessionIdOverride || getOrCreateGlobalSessionId(), 
    [getOrCreateGlobalSessionId, sessionIdOverride]);
    
    // Cargar los datos del carrito desde la API
    const fetchCartData = React.useCallback(async () => {
        if (typeof window === 'undefined' || !sessionId) return;
        
        try {
            // Si la API está disponible, usarla directamente
            if (window.location.hostname !== 'framer.com' && 
                !window.location.hostname.includes('framer.app')) {
                const response = await fetch(`/api/cart?sessionId=${sessionId}`);
                const data = await response.json();
                
                if (data.success && data.cart) {
                    setCartCount(data.cart.totalItems || 0);
                }
                return;
            }
            
            // Si estamos en Framer, intentar obtener del localStorage
            try {
                const savedCart = localStorage.getItem(`mp_cart_${sessionId}`);
                if (savedCart) {
                    const cartData = JSON.parse(savedCart);
                    setCartCount(cartData.totalItems || 0);
                }
            } catch (e) {
                console.error("Error al leer datos del carrito:", e);
            }
            
        } catch (error) {
            console.error("Error al obtener datos del carrito:", error);
        }
    }, [sessionId]);
      // Cargar datos iniciales y configurar listener para actualizaciones
    React.useEffect(() => {
        fetchCartData();
        
        // Escuchar eventos de actualización del carrito
        const handleCartUpdate = (event) => {
            if (event.detail && event.detail.sessionId === sessionId) {
                fetchCartData();
            }
        };
        
        if (typeof window !== 'undefined') {
            window.addEventListener('ALTURA_DIVINA_CART_UPDATE', handleCartUpdate);
            
            // Verificar cada 3 segundos
            const intervalId = setInterval(fetchCartData, 3000);
            
            return () => {
                window.removeEventListener('ALTURA_DIVINA_CART_UPDATE', handleCartUpdate);
                clearInterval(intervalId);
            };
        }
    }, [fetchCartData, sessionId]);
      // Manejar clic en el botón del carrito
    const handleCartButtonClick = () => {
        // Notificar a la aplicación principal
        if (typeof window !== 'undefined') {
            const event = new CustomEvent('ALTURA_DIVINA_OPEN_CART', {
                detail: { sessionId }
            });
            window.dispatchEvent(event);
        }
        
        // Callback opcional
        if (onCartOpen) {
            onCartOpen({
                sessionId,
                cartCount
            });
        }
    };
      // El resto del código de CartButtonEmbed se ha simplificado
    // Ahora solo muestra un botón que abre el carrito del sitio principal    return (
        <div style={{ width, height, position: 'relative' }}>
            <button 
                onClick={handleCartButtonClick}
                style={{
                    backgroundColor: 'transparent',
                    border: 'none',
                    cursor: 'pointer',
                    padding: 0,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: '100%',
                    height: '100%'
                }}
                aria-label="Ver carrito"
            >
                <svg 
                    width={size} 
                    height={size} 
                    viewBox="0 0 24 24" 
                    fill="none" 
                    stroke={iconColor} 
                    strokeWidth="2" 
                    strokeLinecap="round" 
                    strokeLinejoin="round"
                >
                    <circle cx="9" cy="21" r="1"></circle>
                    <circle cx="20" cy="21" r="1"></circle>
                    <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                </svg>
                
                {/* Badge con contador */}
                {showBadge && cartCount > 0 && (<span style={{
                        position: 'absolute',
                        top: '-8px',
                        right: '-8px',
                        backgroundColor: badgeColor,
                        color: '#FFFFFF',
                        borderRadius: '50%',
                        width: `${size * 0.45}px`,
                        height: `${size * 0.45}px`,
                        fontSize: `${size * 0.25}px`,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontWeight: 'bold'
                    }}>
                        {cartCount > 99 ? '99+' : cartCount}
                    </span>                )}
            </button>
        </div>
    );
                        position: 'fixed',
                        top: 0,
                        right: 0,
                        width: '320px',
                        height: '100vh',
                        backgroundColor: cartBgColor,
                        boxShadow: '-2px 0 10px rgba(0, 0, 0, 0.15)',
                        zIndex: 9999,
                        display: 'flex',
                        flexDirection: 'column',
                        fontFamily: 'Inter, sans-serif'
                    }}>
                        {/* Header */}
                        <div style={{
                            padding: '16px',
                            borderBottom: '1px solid #eee',
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center'
                        }}>
                            <h3 style={{ 
                                margin: 0, 
                                color: textColor,
                                fontSize: '18px',
                                fontWeight: 600
                            }}>
                                Tu Carrito
                            </h3>
                            <button 
                                onClick={toggleCart}
                                style={{
                                    backgroundColor: 'transparent',
                                    border: 'none',
                                    cursor: 'pointer',
                                    color: textColor,
                                    fontSize: '24px',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    padding: '4px'
                                }}
                                aria-label="Cerrar carrito"
                            >
                                &times;
                            </button>
                        </div>
                        
                        {/* Contenido del carrito */}
                        <div style={{
                            flex: 1,
                            overflowY: 'auto',
                            padding: '16px'
                        }}>
                            {cartItems.length === 0 ? (
                                <div style={{
                                    display: 'flex',
                                    flexDirection: 'column',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    height: '100%',
                                    textAlign: 'center',
                                    color: textColor
                                }}>
                                    <p>Tu carrito está vacío</p>
                                    <button 
                                        onClick={toggleCart}
                                        style={{
                                            backgroundColor: buttonColor,
                                            color: '#FFFFFF',
                                            border: 'none',
                                            borderRadius: '4px',
                                            padding: '10px 20px',
                                            cursor: 'pointer',
                                            fontSize: '14px',
                                            fontWeight: 500
                                        }}
                                    >
                                        Seguir Comprando
                                    </button>
                                </div>
                            ) : (
                                <div>
                                    {/* Lista de productos */}
                                    {cartItems.map((item, index) => (
                                        <div key={`${item.productId}-${index}`} style={{
                                            marginBottom: '16px',
                                            padding: '12px',
                                            borderBottom: '1px solid #eee',
                                            display: 'flex',
                                            flexDirection: 'column',
                                            color: textColor
                                        }}>
                                            <div style={{
                                                display: 'flex',
                                                justifyContent: 'space-between',
                                                marginBottom: '8px'
                                            }}>
                                                <h4 style={{ 
                                                    margin: 0, 
                                                    fontSize: '16px',
                                                    fontWeight: 500
                                                }}>
                                                    {item.name}
                                                </h4>
                                                <button 
                                                    onClick={() => removeItem(item.productId)}
                                                    style={{
                                                        backgroundColor: 'transparent',
                                                        border: 'none',
                                                        cursor: 'pointer',
                                                        color: '#999',
                                                        fontSize: '18px',
                                                        padding: '0 4px'
                                                    }}
                                                    aria-label={`Eliminar ${item.name}`}
                                                >
                                                    &times;
                                                </button>
                                            </div>
                                            
                                            <div style={{ 
                                                fontSize: '14px',
                                                marginBottom: '8px',
                                                color: textColor
                                            }}>
                                                {formatPrice(item.price)} / unidad
                                            </div>
                                            
                                            <div style={{
                                                display: 'flex',
                                                justifyContent: 'space-between',
                                                alignItems: 'center'
                                            }}>
                                                <div style={{
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    border: '1px solid #ddd',
                                                    borderRadius: '4px',
                                                    overflow: 'hidden'
                                                }}>
                                                    <button 
                                                        onClick={() => updateQuantity(item.productId, item.quantity - 1)}
                                                        style={{
                                                            backgroundColor: '#f5f5f5',
                                                            border: 'none',
                                                            borderRight: '1px solid #ddd',
                                                            padding: '4px 8px',
                                                            cursor: 'pointer',
                                                            color: '#333'
                                                        }}
                                                    >
                                                        -
                                                    </button>
                                                    <span style={{
                                                        padding: '4px 12px',
                                                        fontSize: '14px'
                                                    }}>
                                                        {item.quantity}
                                                    </span>
                                                    <button 
                                                        onClick={() => updateQuantity(item.productId, item.quantity + 1)}
                                                        style={{
                                                            backgroundColor: '#f5f5f5',
                                                            border: 'none',
                                                            borderLeft: '1px solid #ddd',
                                                            padding: '4px 8px',
                                                            cursor: 'pointer',
                                                            color: '#333'
                                                        }}
                                                    >
                                                        +
                                                    </button>
                                                </div>
                                                
                                                <div style={{
                                                    fontWeight: 'bold',
                                                    fontSize: '15px'
                                                }}>
                                                    {formatPrice(item.price * item.quantity)}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                        
                        {/* Footer con total y botones */}
                        {cartItems.length > 0 && (
                            <div style={{
                                padding: '16px',
                                borderTop: '1px solid #eee',
                                backgroundColor: cartBgColor
                            }}>
                                <div style={{
                                    display: 'flex',
                                    justifyContent: 'space-between',
                                    marginBottom: '16px',
                                    fontWeight: 'bold',
                                    fontSize: '18px',
                                    color: textColor
                                }}>
                                    <span>Total:</span>
                                    <span>{formatPrice(cartTotal)}</span>
                                </div>
                                
                                <div style={{ 
                                    display: 'flex',
                                    gap: '10px' 
                                }}>
                                    <button 
                                        onClick={clearCart}
                                        style={{
                                            flex: '1',
                                            padding: '10px',
                                            backgroundColor: '#E5E5E5',
                                            color: '#333',
                                            border: 'none',
                                            borderRadius: '4px',
                                            cursor: 'pointer',
                                            fontSize: '14px',
                                            fontWeight: 500
                                        }}
                                    >
                                        Vaciar
                                    </button>
                                    
                                    <button 
                                        onClick={handleCheckout}
                                        style={{
                                            flex: '2',
                                            padding: '10px',
                                            backgroundColor: buttonColor,
                                            color: '#FFFFFF',
                                            border: 'none',
                                            borderRadius: '4px',
                                            cursor: 'pointer',
                                            fontSize: '14px',
                                            fontWeight: 500
                                        }}
                                    >
                                        Proceder al Pago
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                </>
            )}
        </div>
    );
}

// Controles para el panel de Framer
addPropertyControls(CartButtonEmbed, {
    iconColor: {
        title: "Color del Icono",
        type: ControlType.Color,
        defaultValue: "#333333",
    },
    badgeColor: {
        title: "Color de Badge",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    size: {
        title: "Tamaño Icono",
        type: ControlType.Number,
        defaultValue: 24,
        min: 16,
        max: 48,
        step: 1,
    },
    showBadge: {
        title: "Mostrar Badge",
        type: ControlType.Boolean,
        defaultValue: true,
    },
    width: {
        title: "Ancho",
        type: ControlType.Number,
        defaultValue: 40,
        min: 30,
        max: 200,
        step: 1,
    },
    height: {
        title: "Alto",
        type: ControlType.Number,
        defaultValue: 40,
        min: 30,
        max: 200,
        step: 1,
    },
    onCartOpen: {
        title: "Al Abrir Carrito",
        type: ControlType.EventHandler,
    },
    sessionIdOverride: {
        title: "Session ID (opcional)",
        type: ControlType.String,
        defaultValue: "",
    }
})

// Props por defecto en canvas
CartButtonEmbed.defaultProps = {
    iconColor: "#333333",
    badgeColor: "#F26F32",
    size: 24,
    showBadge: true,
    width: 40,
    height: 40,
}