// src/components/MercadoPagoEmbed.tsx
import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

interface MercadoPagoEmbedProps {
    productId: string
    publicKey: string
    successUrl: string
    pendingUrl: string
    failureUrl: string
    hideTitle: boolean
    buttonColor: string
    circleColor: string
    primaryButtonColor: string
    secondaryButtonColor: string
    width: number | string
    height: number | string
    onRedirect?: (event: any) => void
    sessionIdOverride?: string
    displayMode?: "full" | "cartIconOnly" | "paymentFlowOnly"
    initialStep?: number
}

export function MercadoPagoEmbed(
    props: MercadoPagoEmbedProps
): React.ReactElement {
    const {
        productId,
        publicKey,
        successUrl,
        pendingUrl,
        failureUrl,
        hideTitle,
        buttonColor,
        circleColor,
        primaryButtonColor,
        secondaryButtonColor,
        width,
        height,
        onRedirect,
        sessionIdOverride,
        displayMode,
        initialStep,
    } = props

    const getSharedSessionId = React.useCallback(() => {
        const storageKey = 'mp_shared_framer_session_id'; // Shared key for all embeds on the page
        if (typeof window !== 'undefined' && window.sessionStorage) {
            let id = sessionStorage.getItem(storageKey);
            if (id) return id;
            id = `session_shared_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            sessionStorage.setItem(storageKey, id);
            return id;
        }
        return `session_fallback_${Date.now()}`;
    }, []);

    const currentSessionId = React.useMemo(() => {
        return sessionIdOverride || getSharedSessionId();
    }, [sessionIdOverride, getSharedSessionId]);

    const [iframeKey, setIframeKey] = React.useState(() => `${currentSessionId}_${Date.now()}`);

    React.useEffect(() => {
        const handleMessageFromOwnIframe = (event: MessageEvent) => {
            if (!event.origin.includes('mercadopagoiframe.vercel.app')) { // Replace with your iframe's actual origin
                return;
            }

            const data = event.data;

            if (data.type === 'MP_PAYMENT_SUCCESS' || data.type === 'MP_PAYMENT_PENDING' || data.type === 'MP_PAYMENT_FAILED') {
                if (onRedirect) {
                    onRedirect({ status: data.type.split('_')[2].toLowerCase(), redirectUrl: data.redirectUrl, data: data.paymentData });
                }
                if (data.redirectUrl && window.top) {
                    window.top.location.href = data.redirectUrl;
                }
                return;
            }

            if (data.type === 'CART_UPDATE' && data.sessionId === currentSessionId) {
                console.log(`FramerEmbed (${currentSessionId}): Received CART_UPDATE from own iframe. Dispatching global ALTURA_DIVINA_CART_UPDATE.`);
                const globalUpdateEvent = new CustomEvent('ALTURA_DIVINA_CART_UPDATE', {
                    detail: {
                        source: 'mercadopago_embed_parent',
                        sessionId: currentSessionId, // The sessionId of the cart that was updated
                    }
                });
                window.dispatchEvent(globalUpdateEvent);
            }
        };

        const handleGlobalCartEventListener = (event: CustomEvent) => {
            // Check if the event is the one we're interested in and for our session
            if (event.type === 'ALTURA_DIVINA_CART_UPDATE' && event.detail && event.detail.sessionId === currentSessionId) {
                console.log(`FramerEmbed (${currentSessionId}): Heard global ALTURA_DIVINA_CART_UPDATE for my session. Refreshing iframe.`);
                setIframeKey(`${currentSessionId}_refresh_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`);
            }
        };

        window.addEventListener('message', handleMessageFromOwnIframe);
        window.addEventListener('ALTURA_DIVINA_CART_UPDATE', handleGlobalCartEventListener as EventListener);

        return () => {
            window.removeEventListener('message', handleMessageFromOwnIframe);
            window.removeEventListener('ALTURA_DIVINA_CART_UPDATE', handleGlobalCartEventListener as EventListener);
        };
    }, [currentSessionId, onRedirect, successUrl, pendingUrl, failureUrl]);


    const baseUrl = "https://mercadopagoiframe.vercel.app/"; // Your iframe's base URL
    const paramsForIframe: Record<string, string> = {
        initialProductId: productId || "",
        publicKey: publicKey || "",
        successUrl: successUrl || "",
        pendingUrl: pendingUrl || "",
        failureUrl: failureUrl || "",
        hideTitle: hideTitle ? "true" : "false",
        buttonColor: buttonColor || "#F26F32",
        circleColor: circleColor || "#F26F32",
        primaryButtonColor: primaryButtonColor || "#F26F32",
        secondaryButtonColor: secondaryButtonColor || "#E5E5E5",
        isInIframe: "true",
        sessionId: currentSessionId,
    };

    if (displayMode) {
        paramsForIframe["displayMode"] = displayMode;
    }
    if (initialStep !== undefined && initialStep !== null) {
        paramsForIframe["initialStep"] = initialStep.toString();
    }

    const queryParams = new URLSearchParams(paramsForIframe).toString();
    const iframeSrc = `${baseUrl}?${queryParams}`;

    return (
        <iframe
            key={iframeKey}
            src={iframeSrc}
            width={width}
            height={height}
            style={{
                border: "none",
                borderRadius: "8px",
                overflow: "hidden",
            }}
            allow="payment"
        />
    );
}

addPropertyControls(MercadoPagoEmbed, {
    productId: { title: "Product ID", type: ControlType.String, defaultValue: "2" },
    publicKey: { title: "MP Public Key", type: ControlType.String, defaultValue: "" },
    successUrl: { title: "Success URL", type: ControlType.String, defaultValue: "https://alturadivina.com/confirmacion-de-compra" },
    pendingUrl: { title: "Pending URL", type: ControlType.String, defaultValue: "https://alturadivina.com/proceso-de-compra" },
    failureUrl: { title: "Failure URL", type: ControlType.String, defaultValue: "https://alturadivina.com/error-de-compra" },
    hideTitle: { title: "Hide Title", type: ControlType.Boolean, defaultValue: false },
    buttonColor: { title: "MP Button Color", type: ControlType.Color, defaultValue: "#F26F32" },
    circleColor: { title: "MP Circle Color", type: ControlType.Color, defaultValue: "#F26F32" },
    primaryButtonColor: { title: "Primary Button Color", type: ControlType.Color, defaultValue: "#F26F32" },
    secondaryButtonColor: { title: "Secondary Button Color", type: ControlType.Color, defaultValue: "#E5E5E5" },
    width: { title: "Width", type: ControlType.Number, defaultValue: 400, min: 100, max: 2000, step: 10 },
    height: { title: "Height", type: ControlType.Number, defaultValue: 600, min: 100, max: 3000, step: 10 },
    onRedirect: { title: "On Redirect", type: ControlType.EventHandler },
    sessionIdOverride: { title: "Session ID Override", type: ControlType.String, defaultValue: "", description: "Manually set a session ID. Leave empty for shared session." },
    displayMode: { title: "Display Mode", type: ControlType.Enum, options: ["full", "cartIconOnly", "paymentFlowOnly"], defaultValue: "full" },
    initialStep: {
        title: "Initial Step (PaymentFlow)",
        type: ControlType.Number,
        defaultValue: 1,
        min: 1,
        step: 1,
        hidden(props) { return props.displayMode === "cartIconOnly"; },
    },
});

MercadoPagoEmbed.defaultProps = {
    productId: "2",
    publicKey: "",
    successUrl: "https://alturadivina.com/confirmacion-de-compra",
    pendingUrl: "https://alturadivina.com/proceso-de-compra",
    failureUrl: "https://alturadivina.com/error-de-compra",
    hideTitle: false,
    buttonColor: "#F26F32",
    circleColor: "#F26F32",
    primaryButtonColor: "#F26F32",
    secondaryButtonColor: "#E5E5E5",
    width: 300,
    height: 500,
    displayMode: "full" as "full",
    initialStep: 1,
    sessionIdOverride: "",
};
