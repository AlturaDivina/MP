// src/components/MercadoPagoEmbed.tsx
import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

interface MercadoPagoEmbedProps {
    productId: string
    publicKey: string
    successUrl: string
    pendingUrl: string
    failureUrl: string
    hideTitle: boolean
    buttonColor: string
    circleColor: string
    primaryButtonColor: string
    secondaryButtonColor: string
    width: number | string
    height: number | string
    onRedirect?: (event: any) => void
}

export function MercadoPagoEmbed(
    props: MercadoPagoEmbedProps
): React.ReactElement {
    const {
        productId,
        publicKey,
        successUrl,
        pendingUrl,
        failureUrl,
        hideTitle,
        buttonColor,
        circleColor,
        primaryButtonColor,
        secondaryButtonColor,
        width,
        height,
        onRedirect
    } = props;
    
    React.useEffect(() => {
        // Escuchar mensajes del iframe
        const handleMessage = (event: MessageEvent) => {
            // Verificar origen para seguridad
            if (!event.origin.includes('mercadopagoiframe.vercel.app')) {
                return;
            }
            
            if (event.data.type === 'MP_PAYMENT_SUCCESS') {
                console.log('Pago exitoso, redirigiendo a:', event.data.redirectUrl);
                // Llamar al callback de redirección si existe
                if (onRedirect) {
                    onRedirect({
                        status: 'success',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                // Redireccionar la página completa
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            } 
            else if (event.data.type === 'MP_PAYMENT_PENDING') {
                console.log('Pago pendiente, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'pending',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
            else if (event.data.type === 'MP_PAYMENT_FAILED') {
                console.log('Pago fallido, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'failed',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
        };
        
        window.addEventListener('message', handleMessage);
        
        return () => {
            window.removeEventListener('message', handleMessage);
        };
    }, [onRedirect, successUrl, pendingUrl, failureUrl]);
    
    // Generar un session ID único para persistencia del carrito
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;

    // Eliminar el # de los colores para evitar problemas de codificación en la URL
    const sanitizeColor = (color: string) => color.replace('#', '');
    
    const baseUrl = "https://mercadopagoiframe.vercel.app/";
    const queryParams = new URLSearchParams({
        initialProductId: productId || '2',  // Asegurar que siempre haya un valor
        publicKey: publicKey || '',
        successUrl: successUrl || '',
        pendingUrl: pendingUrl || '',
        failureUrl: failureUrl || '',
        hideTitle: hideTitle ? 'true' : 'false',
        buttonColor: sanitizeColor(buttonColor || 'F26F32'),  // Quitar el # para evitar problemas de URL
        circleColor: sanitizeColor(circleColor || 'F26F32'),
        primaryButtonColor: sanitizeColor(primaryButtonColor || 'F26F32'),
        secondaryButtonColor: sanitizeColor(secondaryButtonColor || 'E5E5E5'),
        isInIframe: 'true',
        sessionId: sessionId
    }).toString();
    
    const iframeSrc = `${baseUrl}?${queryParams}`;
    
    return (
        <iframe
            src={iframeSrc}
            width={width}
            height={height}
            style={{
                border: "none",
                borderRadius: "8px",
                overflow: "hidden"
            }}
            allow="payment"
        />
    );
}

// Controles en el panel de Framer
addPropertyControls(MercadoPagoEmbed, {
    productId: {
        title: "Product ID",
        type: ControlType.String,
        defaultValue: "2",
    },
    publicKey: {
        title: "MP Public Key",
        type: ControlType.String,
        defaultValue: "",
    },
    successUrl: {
        title: "Success URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/confirmacion-de-compra",
    },
    pendingUrl: {
        title: "Pending URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/proceso-de-compra",
    },
    failureUrl: {
        title: "Failure URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/error-de-compra",
    },
    hideTitle: {
        title: "Hide Title",
        type: ControlType.Boolean,
        defaultValue: false,
    },
    buttonColor: {
        title: "MP Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    circleColor: {
        title: "MP Circle Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    primaryButtonColor: {
        title: "Primary Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    secondaryButtonColor: {
        title: "Secondary Button Color",
        type: ControlType.Color,
        defaultValue: "#E5E5E5",
    },
    width: {
        title: "Width",
        type: ControlType.Number,
        defaultValue: 400,
        min: 100,
        max: 2000,
        step: 10,
    },
    height: {
        title: "Height",
        type: ControlType.Number,
        defaultValue: 600,
        min: 100,
        max: 3000,
        step: 10,
    },
    onRedirect: {
        title: "On Redirect",
        type: ControlType.EventHandler,
    },
})

// Props por defecto en canvas
MercadoPagoEmbed.defaultProps = {
    productId: "2",
    publicKey: "",
    successUrl: "https://alturadivina.com/confirmacion-de-compra",
    pendingUrl: "https://alturadivina.com/proceso-de-compra",
    failureUrl: "https://alturadivina.com/error-de-compra",
    hideTitle: false,
    buttonColor: "#F26F32",
    circleColor: "#F26F32",
    primaryButtonColor: "#F26F32",
    secondaryButtonColor: "#E5E5E5",
    width: 300,
    height: 500,
}

// Cart Button Component
export function MercadoPagoCartButton(props) {
    const {
        buttonColor = "#F26F32",
        buttonSize = 24,
        onCartUpdate = () => {},
    } = props;
    
    const [hasError, setHasError] = React.useState(false);
    
    // Clean color format (remove # if present)
    const cleanColor = buttonColor.startsWith('#') ? buttonColor.substring(1) : buttonColor;
    
    // Construct base URL
    const baseUrl = window.location.hostname.includes('framer.app') || 
                window.location.hostname.includes('framer.website') 
                ? "https://mercadopagoiframe.vercel.app/cart-button"
                : "https://mercadopagoiframe.vercel.app/cart-button";
    
    // Create params object
    const params = {
        buttonColor: cleanColor,
        buttonSize: buttonSize.toString(),
    };
    
    // Convert to query string
    const queryParams = new URLSearchParams(params).toString();
    
    // Construct complete URL
    const iframeSrc = `${baseUrl}?${queryParams}`;
    
    const handleIframeError = (event) => {
        console.error("Error cargando el iframe del carrito:", event);
        setHasError(true);
    };
    
    // Handle messages from iframe
    React.useEffect(() => {
        const handleMessage = (event) => {
            if (event.data && event.data.type === "MP_CART_UPDATE") {
                if (onCartUpdate) {
                    onCartUpdate(event.data.cart);
                }
            }
        };
        
        window.addEventListener('message', handleMessage);
        return () => window.removeEventListener('message', handleMessage);
    }, [onCartUpdate]);
    
    return (
        <Frame
            src={iframeSrc}
            width="50px"
            height="50px"
            style={{
                border: "none",
                overflow: "visible"
            }}
            onError={handleIframeError}
        />
    );
}

// Add property controls for the cart button
addPropertyControls(MercadoPagoCartButton, {
    buttonColor: {
        title: "Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32"
    },
    buttonSize: {
        title: "Button Size",
        type: ControlType.Number,
        defaultValue: 24,
        min: 16,
        max: 48,
        step: 1
    },
    onCartUpdate: {
        title: "On Cart Update",
        type: ControlType.EventHandler
    }
});
