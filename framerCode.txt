// src/components/MercadoPagoEmbed.tsx
import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

interface MercadoPagoEmbedProps {
    productId: string
    publicKey: string
    successUrl: string
    pendingUrl: string
    failureUrl: string
    hideTitle: boolean
    buttonColor: string
    circleColor: string
    primaryButtonColor: string
    secondaryButtonColor: string
    width: number | string
    height: number | string
    onRedirect?: (event: any) => void
}

export function MercadoPagoEmbed(
    props: MercadoPagoEmbedProps
): React.ReactElement {
    const {
        productId,
        publicKey,
        successUrl,
        pendingUrl,
        failureUrl,
        hideTitle,
        buttonColor,
        circleColor,
        primaryButtonColor,
        secondaryButtonColor,
        width,
        height,
        onRedirect
    } = props;
    
    // Referencia al iframe para gestionar errores
    const iframeRef = React.useRef<HTMLIFrameElement>(null);
    const [hasError, setHasError] = React.useState(false);
    
    React.useEffect(() => {
        const handleMessage = (event: MessageEvent) => {
            // Aceptar mensajes tanto de vercel.app como del dominio personalizado
            if (!event.origin.includes('mercadopagoiframe.vercel.app') && 
                !event.origin.includes('alturadivina.com')) {
                return;
            }
            
            // Procesar mensajes de MP_PAYMENT_SUCCESS, MP_PAYMENT_PENDING, MP_PAYMENT_FAILED...
            if (event.data.type === 'MP_PAYMENT_SUCCESS') {
                console.log('Pago exitoso, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'success',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            } 
            else if (event.data.type === 'MP_PAYMENT_PENDING') {
                console.log('Pago pendiente, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'pending',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
            else if (event.data.type === 'MP_PAYMENT_FAILED') {
                console.log('Pago fallido, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'failed',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
        };
        
        window.addEventListener('message', handleMessage);
        
        return () => {
            window.removeEventListener('message', handleMessage);
        };
    }, [onRedirect, successUrl, pendingUrl, failureUrl]);
    
    // Manejar error de carga del iframe
    const handleIframeError = (event) => {
        console.error("Error cargando el iframe:", event);
        setHasError(true);
    };
    
    // Generar un session ID único para persistencia del carrito
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;

    // Función mejorada para sanitizar colores - NO eliminar el #
    const sanitizeColor = (color: string) => {
        if (!color) return '#F26F32';
        // Asegurar que el color tenga el prefijo #
        return color.startsWith('#') ? color : `#${color}`;
    };
    
    // Corregir la construcción de la URL base
    const baseUrl = window.location.hostname.includes('framer.app') || 
                window.location.hostname.includes('framer.website') 
                ? "https://mercadopagoiframe.vercel.app"  // Quitar ?direct=true
                : "https://mercadopagoiframe.vercel.app";
    
    // Crear objeto de parámetros
    const params = {
        initialProductId: productId || '2',
        publicKey: publicKey || 'TEST-b2378f58-6c89-472c-ada5-2bcfd164c1eb',
        successUrl: successUrl || '',
        pendingUrl: pendingUrl || '',
        failureUrl: failureUrl || '',
        hideTitle: hideTitle ? 'true' : 'false',
        // Mantener los colores con su formato completo incluyendo #
        buttonColor: sanitizeColor(buttonColor),
        circleColor: sanitizeColor(circleColor),
        primaryButtonColor: sanitizeColor(primaryButtonColor),
        secondaryButtonColor: sanitizeColor(secondaryButtonColor),
        isInIframe: 'true',
        sessionId: sessionId,
        quantity: '1',
        _t: Date.now().toString(),
    };

    // Añadir parámetro direct=true solo en entornos Framer
    if (window.location.hostname.includes('framer.app') || 
        window.location.hostname.includes('framer.website')) {
        params['direct'] = 'true';
    }
    
    const queryParams = new URLSearchParams(params).toString();
    
    // Construir URL correctamente
    const iframeSrc = `${baseUrl}/?${queryParams}`;
    
    // Si hay error, mostrar mensaje y botón para reintentar
    if (hasError) {
        return (
            <div style={{
                width: width,
                height: height,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                border: "1px solid #f0f0f0",
                borderRadius: "8px",
                padding: "20px",
                backgroundColor: "#fff5f5",
                fontFamily: "sans-serif"
            }}>
                <h2 style={{ color: "#e53e3e", marginBottom: "20px" }}>Error de conexión</h2>
                <p style={{ textAlign: "center", marginBottom: "20px" }}>
                    No se pudo cargar el sistema de pago. Por favor verifica tu conexión a internet.
                </p>
                <button 
                    onClick={() => {
                        setHasError(false);
                        // Forzar recarga con nuevo timestamp y sessionId
                        const freshSessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
                        const freshParams = new URLSearchParams(queryParams);
                        freshParams.set('_t', Date.now().toString());
                        freshParams.set('sessionId', freshSessionId);
                        
                        if (iframeRef.current) {
                            iframeRef.current.src = `${baseUrl}?${freshParams.toString()}`;
                        }
                    }}
                    style={{
                        padding: "10px 20px",
                        backgroundColor: "#F26F32",
                        color: "white",
                        border: "none",
                        borderRadius: "4px",
                        cursor: "pointer"
                    }}
                >
                    Reintentar
                </button>
            </div>
        );
    }
    
    // Añadir justo antes de return (iframe...)
    console.log('Cargando iframe con URL:', iframeSrc);
    
    return (
        <iframe
            ref={iframeRef}
            src={iframeSrc}
            width={width}
            height={height}
            style={{
                border: "none",
                borderRadius: "8px",
                overflow: "hidden"
            }}
            allow="payment"
            onError={handleIframeError}
            onLoad={() => console.log("Iframe cargado correctamente")}
        />
    );
}

// Controles en el panel de Framer
addPropertyControls(MercadoPagoEmbed, {
    productId: {
        title: "Product ID",
        type: ControlType.String,
        defaultValue: "2",
    },
    publicKey: {
        title: "MP Public Key",
        type: ControlType.String,
        defaultValue: "",
    },
    successUrl: {
        title: "Success URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/confirmacion-de-compra",
    },
    pendingUrl: {
        title: "Pending URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/proceso-de-compra",
    },
    failureUrl: {
        title: "Failure URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/error-de-compra",
    },
    hideTitle: {
        title: "Hide Title",
        type: ControlType.Boolean,
        defaultValue: false,
    },
    buttonColor: {
        title: "MP Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    circleColor: {
        title: "MP Circle Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    primaryButtonColor: {
        title: "Primary Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    secondaryButtonColor: {
        title: "Secondary Button Color",
        type: ControlType.Color,
        defaultValue: "#E5E5E5",
    },
    width: {
        title: "Width",
        type: ControlType.Number,
        defaultValue: 400,
        min: 100,
        max: 2000,
        step: 10,
    },
    height: {
        title: "Height",
        type: ControlType.Number,
        defaultValue: 600,
        min: 100,
        max: 3000,
        step: 10,
    },
    onRedirect: {
        title: "On Redirect",
        type: ControlType.EventHandler,
    },
})

// Props por defecto en canvas
MercadoPagoEmbed.defaultProps = {
    productId: "2",
    publicKey: "",
    successUrl: "https://alturadivina.com/confirmacion-de-compra",
    pendingUrl: "https://alturadivina.com/proceso-de-compra",
    failureUrl: "https://alturadivina.com/error-de-compra",
    hideTitle: false,
    buttonColor: "#F26F32",
    circleColor: "#F26F32",
    primaryButtonColor: "#F26F32",
    secondaryButtonColor: "#E5E5E5",
    width: 300,
    height: 500,
}
