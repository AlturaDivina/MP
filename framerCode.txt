// src/components/MercadoPagoEmbed.tsx
import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

interface MercadoPagoEmbedProps {
    productId: string
    publicKey: string
    successUrl: string
    pendingUrl: string
    failureUrl: string
    hideTitle: boolean
    buttonColor: string
    circleColor: string
    primaryButtonColor: string
    secondaryButtonColor: string
    width: number | string
    height: number | string
    onRedirect?: (event: any) => void
    sessionIdOverride?: string
    displayMode?: "full" | "cartIconOnly" | "paymentFlowOnly" // New prop
    initialStep?: number // New prop
}

export function MercadoPagoEmbed(
    props: MercadoPagoEmbedProps
): React.ReactElement {
    const {
        productId,
        publicKey,
        successUrl,
        pendingUrl,
        failureUrl,
        hideTitle,
        buttonColor,
        circleColor,
        primaryButtonColor,
        secondaryButtonColor,
        width,
        height,
        onRedirect,
        sessionIdOverride,
        displayMode,
        initialStep,
    } = props

    const [isSidebarOpenInIframe, setIsSidebarOpenInIframe] = React.useState(false)
    const [iframeKey, setIframeKey] = React.useState(Date.now()) // Para forzar recarga del iframe si es necesario

    // CAMBIO CLAVE: Usar un sessionId global para toda la página
    const getOrCreateGlobalSessionId = React.useCallback(() => {
        // 1. Intentar obtener de la URL
        if (typeof window !== 'undefined') {
            const urlParams = new URLSearchParams(window.location.search);
            const sessionFromUrl = urlParams.get('sessionId');
            if (sessionFromUrl) return sessionFromUrl;
        }
        
        // 2. Intentar obtener del sessionStorage (persistente en la sesión)
        if (typeof window !== 'undefined' && window.sessionStorage) {
            const storedId = sessionStorage.getItem('mp_global_session_id');
            if (storedId) return storedId;
        }
        
        // 3. Crear uno nuevo y guardarlo para que sea consistente
        const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        if (typeof window !== 'undefined' && window.sessionStorage) {
            sessionStorage.setItem('mp_global_session_id', newSessionId);
        }
        return newSessionId;
    }, []);
    
    // Usar el sessionId global o el override proporcionado explícitamente
    const sessionId = React.useMemo(() => 
        sessionIdOverride || getOrCreateGlobalSessionId(), 
    [getOrCreateGlobalSessionId, sessionIdOverride]);
    
    // El resto de tu código de MercadoPagoEmbed...
    React.useEffect(() => {
        const handleMessage = (event: MessageEvent) => {
            // CAMBIO: Usar una URL más específica o verificar el origen de forma más robusta
            const allowedOriginPattern = /^https?:\/\/mercadopagoiframe\.vercel\.app$/;
            if (!allowedOriginPattern.test(event.origin)) {
                 // console.warn(`Mensaje ignorado de origen no permitido: ${event.origin}`);
                return;
            }

            // Escuchar el estado del sidebar desde el iframe
            if (event.data.type === 'MP_IFRAME_CART_SIDEBAR_STATE') {
                setIsSidebarOpenInIframe(event.data.isOpen);
            } 
            else if (event.data.type === 'MP_PAYMENT_SUCCESS') { // Asegúrate que este tipo de evento exista y se maneje
                console.log('Pago exitoso, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'success',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                if (event.data.redirectUrl && window.top) {
                    window.top.location.href = event.data.redirectUrl;
                }
            } 
            else if (event.data.type === 'MP_PAYMENT_PENDING') {
                console.log('Pago pendiente, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'pending',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
            else if (event.data.type === 'MP_PAYMENT_FAILED') {
                console.log('Pago fallido, redirigiendo a:', event.data.redirectUrl);
                if (onRedirect) {
                    onRedirect({
                        status: 'failed',
                        redirectUrl: event.data.redirectUrl,
                        data: event.data.paymentData
                    });
                }
                
                if (event.data.redirectUrl) {
                    window.top.location.href = event.data.redirectUrl;
                }
            }
            else if (event.data.type === 'CART_UPDATE') {
                // NUEVO: Cuando el iframe actualiza el carrito, notificar a otros componentes
                if (typeof window !== 'undefined') {
                    const updateEvent = new CustomEvent('ALTURA_DIVINA_CART_UPDATE', {
                        detail: { source: 'mercadopago_iframe', sessionId }
                    });
                    window.dispatchEvent(updateEvent);
                }
            }
        };

        window.addEventListener('message', handleMessage);
        return () => {
            window.removeEventListener('message', handleMessage);
        };
    }, [onRedirect, successUrl, pendingUrl, failureUrl, sessionId]); // Añadir dependencias si es necesario

    const baseUrl = "https://mercadopagoiframe.vercel.app/" // Asegúrate que esta es tu URL de deploy
    const params = {
        initialProductId: productId || "",
        publicKey: publicKey || "",
        successUrl: successUrl || "",
        pendingUrl: pendingUrl || "",
        failureUrl: failureUrl || "",
        hideTitle: hideTitle ? "true" : "false",
        buttonColor: buttonColor || "#F26F32",
        circleColor: circleColor || "#F26F32",
        primaryButtonColor: primaryButtonColor || "#F26F32",
        secondaryButtonColor: secondaryButtonColor || "#E5E5E5",
        isInIframe: "true",
        sessionId: sessionId, // Usar el sessionId consistente
    }

    if (displayMode) {
        params["displayMode"] = displayMode
    }
    if (initialStep !== undefined && initialStep !== null) {
        params["initialStep"] = initialStep.toString()
    }
    // ... (construcción de queryParams e iframeSrc) ...
    const queryParams = new URLSearchParams(Object.fromEntries(
        Object.entries(params).filter(([_, v]) => v !== null && v !== undefined)
    )).toString();
    const iframeSrc = `${baseUrl}?${queryParams}`;


    // Determinar dimensiones del iframe
    let iframeWidth = width;
    let iframeHeight = height;

    if (displayMode === "cartIconOnly" && isSidebarOpenInIframe) {
        iframeWidth = props.sidebarWidth || 320; // Nuevo prop para ancho del sidebar, o un valor fijo
        iframeHeight = props.sidebarHeight || "100%"; // Nuevo prop para altura, o un valor fijo
    } else if (displayMode === "cartIconOnly" && !isSidebarOpenInIframe) {
        iframeWidth = props.iconWidth || 60; // Nuevo prop para ancho del icono
        iframeHeight = props.iconHeight || 60; // Nuevo prop para alto del icono
    }


    return (
        <iframe
            key={iframeKey} // Puede ayudar a forzar la recarga si cambian props críticas
            src={iframeSrc}
            width={iframeWidth}
            height={iframeHeight}
            style={{
                border: "none",
                borderRadius: "8px",
                overflow: "hidden",
                transition: "width 0.3s ease, height 0.3s ease", // Transición suave
            }}
            allow="payment"
        />
    )
}

addPropertyControls(MercadoPagoEmbed, {
    productId: {
        title: "Product ID",
        type: ControlType.String,
        defaultValue: "2",
    },
    publicKey: {
        title: "MP Public Key",
        type: ControlType.String,
        defaultValue: "",
    },
    successUrl: {
        title: "Success URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/confirmacion-de-compra",
    },
    pendingUrl: {
        title: "Pending URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/proceso-de-compra",
    },
    failureUrl: {
        title: "Failure URL",
        type: ControlType.String,
        defaultValue: "https://alturadivina.com/error-de-compra",
    },
    hideTitle: {
        title: "Hide Title",
        type: ControlType.Boolean,
        defaultValue: false,
    },
    buttonColor: {
        title: "MP Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    circleColor: {
        title: "MP Circle Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",  // Cambiado de #009EE3 a #F26F32
    },
    primaryButtonColor: {
        title: "Primary Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    secondaryButtonColor: {
        title: "Secondary Button Color",
        type: ControlType.Color,
        defaultValue: "#E5E5E5",
    },
    width: {
        title: "Width",
        type: ControlType.Number,
        defaultValue: 400,
        min: 100,
        max: 2000,
        step: 10,
    },
    height: {
        title: "Height",
        type: ControlType.Number,
        defaultValue: 600,
        min: 100,
        max: 3000,
        step: 10,
    },
    onRedirect: {
        title: "On Redirect",
        type: ControlType.EventHandler,
    },
    // Nuevo control para sessionId (opcional)
    sessionIdOverride: {
        title: "Session ID (opcional)",
        type: ControlType.String,
        defaultValue: "",
    },
    displayMode: {
        title: "Display Mode",
        type: ControlType.Enum,
        options: ["full", "cartIconOnly", "paymentFlowOnly"],
        defaultValue: "full",
    },
    initialStep: {
        title: "Initial Step (PaymentFlow)",
        type: ControlType.Number,
        defaultValue: 1,
        min: 1,
        step: 1,
        hidden(props) {
            return props.displayMode === "cartIconOnly" || props.displayMode === "full"
        },
    },
    // Nuevos props para controlar tamaños en modo cartIconOnly
    iconWidth: {
        title: "Icon Width (cartIconOnly)",
        type: ControlType.Number,
        defaultValue: 60,
        hidden(props) { return props.displayMode !== "cartIconOnly"; },
    },
    iconHeight: {
        title: "Icon Height (cartIconOnly)",
        type: ControlType.Number,
        defaultValue: 60,
        hidden(props) { return props.displayMode !== "cartIconOnly"; },
    },
    sidebarWidth: {
        title: "Sidebar Width (cartIconOnly)",
        type: ControlType.Number,
        defaultValue: 320,
        hidden(props) { return props.displayMode !== "cartIconOnly"; },
    },
    sidebarHeight: {
        title: "Sidebar Height (cartIconOnly)",
        type: ControlType.String, // Puede ser número o "100%"
        defaultValue: "100%",
        hidden(props) { return props.displayMode !== "cartIconOnly"; },
    },
});

MercadoPagoEmbed.defaultProps = {
    productId: "2",
    publicKey: "",
    successUrl: "https://alturadivina.com/confirmacion-de-compra",
    pendingUrl: "https://alturadivina.com/proceso-de-compra",
    failureUrl: "https://alturadivina.com/error-de-compra",
    hideTitle: false,
    buttonColor: "#F26F32",
    circleColor: "#F26F32",  // Cambiado de #009EE3 a #F26F32
    primaryButtonColor: "#F26F32",
    secondaryButtonColor: "#E5E5E5",
    width: 300,
    height: 500,
    displayMode: "full",
    initialStep: 1,
    iconWidth: 60,
    iconHeight: 60,
    sidebarWidth: 320,
    sidebarHeight: "100%",
}
