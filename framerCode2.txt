import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

export function MercadoPagoCartButton(props) {
    const {
        buttonColor = "#F26F32",
        buttonSize = 24,
        onCartUpdate = () => {},
    } = props

    const [hasError, setHasError] = React.useState(false)

    // Clean color format (remove # if present)
    const cleanColor = buttonColor.startsWith("#")
        ? buttonColor.substring(1)
        : buttonColor

    // Construct base URL
    const baseUrl =
        window.location.hostname.includes("framer.app") ||
        window.location.hostname.includes("framer.website")
            ? "https://mercadopagoiframe.vercel.app/cart-button"
            : "https://mercadopagoiframe.vercel.app/cart-button"

    // Create params object
    const params = {
        buttonColor: cleanColor,
        buttonSize: buttonSize.toString(),
    }

    // Convert to query string
    const queryParams = new URLSearchParams(params).toString()

    // Construct complete URL
    const iframeSrc = `${baseUrl}?${queryParams}`

    const handleIframeError = (event) => {
        console.error("Error cargando el iframe del carrito:", event)
        setHasError(true)
    }

    // Handle messages from iframe
    React.useEffect(() => {
        const handleMessage = (event) => {
            if (event.data && event.data.type === "MP_CART_UPDATE") {
                if (onCartUpdate) {
                    onCartUpdate(event.data.cart)
                }
            }
        }

        window.addEventListener("message", handleMessage)
        return () => window.removeEventListener("message", handleMessage)
    }, [onCartUpdate])

    return (
        <iframe
            src={iframeSrc}
            width="50px"
            height="50px"
            style={{
                border: "none",
                overflow: "visible",
            }}
            onError={handleIframeError}
        />
    )
}

// Add property controls for the cart button
addPropertyControls(MercadoPagoCartButton, {
    buttonColor: {
        title: "Button Color",
        type: ControlType.Color,
        defaultValue: "#F26F32",
    },
    buttonSize: {
        title: "Button Size",
        type: ControlType.Number,
        defaultValue: 24,
        min: 16,
        max: 48,
        step: 1,
    },
    onCartUpdate: {
        title: "On Cart Update",
        type: ControlType.EventHandler,
    },
})
